Priority of improvements (my ranking)
// MVP

// Later
  - 005 [improvement, remove entities with ENTF]
  - 024 [improvement, angle constraint]
  - 009 [UI improvement]
  - 029 [functionality - length constraints]
  - 023 [functionality - tools arc]
  - 028 [functionality - construction lines]
  - 022 [functionality - more constraints]  
  - 017 [functionality - tools rectangle]
  - 008 [settings - settings slice to make e.g. color of lines configurable]
  - 007  // most important work done, considering constraints hard to do,
         // therefore least prio


List of Improvements

(005) Implement remove entities in sketcher slice via canvas
    - Select an Entity (e.g. a line, a point) --> press ENTF key to delete it
    (click listener on Entity for selection; then event listener on keyboard - could be combined with drag'n'drop of lines)

(007) drag'n'drop of lines and points improvements
   - consider constraints
   - improve behaviour of dragging of lines              [done] --> still improvements possible, but for now enough
   - remove the weirdness of current behaviour           [done]

(008) put common settings in a "settingsSlice" s.t. they can be changed, e.g. color of lines etc.

(009) Improve update of constraints in ConstraintsTable.tsx
   - Current way to edit leaves many ways the user can mess up with the data/ input invalid data
   - Proper error handling needed / edit will be different per constraint type (as display)

(017) Create a tool to generate a rectangle (with proper constraints)

(022) Add symmetry (to line, horizontal, vertical) constraint
      Add tangent constraint (SLVS_C_ARC_LINE_TANGENT, SLVS_C_CURVE_CURVE_TANGENT --> do these also support circles?)

(023) Add Arc drawing tool

(024) Improve Angle constraint
      - Behaviour is sometimes a bit strange, e.g. when dragging a line constraint error is produced --> need to be investigated in backend
      - Drawing of constraint on canvas
        - Line should be replaced by an arc
        - Start/end positions of line/arc should be improved (not just use middle of two lines but be nearer to the edge of the angle)

(028) Add construction lines (circles etc.)

(029) Length constraint between point and line, point and point etc.
    - point and point should be easy because length constraint for points uses points of line internally
    - for point and line e.g. use the normal distance


On Hold

(025) Infinite loop in solver - Need to detect swapped points
    --> cannot reproduce the issue (maybe the issue was solved by fixing 027?)
       - Test case should be a triangle (not a rectangle) - right?
    - Each solver result swaps two points each time causing a new solver call
    - Need to detect that
    - Test Case: Rectangle with two 45 degree constraints and a length constraint on the hypothenuse of the 90 degree angle
                 + coincidence with zero point
                 + horizontal/ vertical constraint on one side
    - Possible mitigation:
      - Keep changes from previous run
      - Compare it with this run
      --> if swapped points detected - discard the change


Done Improvements

(026) Bugfix: There is a bug in the cursor tool (moving a sketch shape).
      When trying to move a shape it disappears from the sketcher screen.
      Seems that also the third coordinate is updated.
      This is related to (007) - the drag'n'drop feature of lines

(027) Testing and bugfixing (solver infinite loop due to rounding error)
    - If adding many lines and constraints it is quite easy to trigger
      an endless loop in the solver --> need to get rid of this condition
      (similar to bug 025)
    - In this particular case it is a rounding error
      --> round the result

(020) Improve the top button bar
    - E.g. visually separate what are constraint tools and what are geometry tools
    - Currently the status indicator is not always visible (too few space)
    --> will need a redesign of layout, <Header> seems to not support multiple lines ....

(004) integration of redux persist
    - Examine possiblilities how to save redux state (e.g. to local storage etc.)
    - e.g. add persistence because currently all data is lost after a reload
    --> Use Redux Persist: https://blog.logrocket.com/persist-state-redux-persist-redux-toolkit-react/

(026) If drawing points too far away from the coordinate cross
      they are only visible when zooming out quite far
      - seems to be an issue with camera settings

(001) Improvements of labels drawn on sketch (mainly includes Constraints)
    - Symbols for horizontal, vertical constraint
    - Symbol (number in mm) for length constraint
    + Issue is that when zooming the relative position changes,
      - most likely has to do with current implementation in LineObject.tsx using <Html> object
      - objects are not affected by the zoom operation (have same size and position although size and position of lines change)
    + Need to find alternative way of implementing it (e.g. use dedicated objects which also react to the zooming)

(002) update of constraints on canvas (e.g. makes sense for length constraint)
    - implement (001) first to have dedicated objects which can be selected (respond to click events)

(003) delete of constraints on canvas
    - implement (001) first to have dedicated objects which can be selected (respond to click events)

(010) Highlight of selected items (constraints, entities) - in table as well as on canvas
   - For entities it is already implemented one way
       Select in table --> Highlight on canvas
   - TODO entities: Select on canvas --> Highlight in table
   - Same for constraints

(012) Add support for circle in solver backend - seems to be not supported yet (fully constrained although no radius constraint)

(014) Selection of point to point constraints (length constraints) for lines is not yet supported --> the implementation should be reworked

(013) Selection of entities constraint: deselection is not yet supported

(011) Fix bug when deleting entities:
   - It is possible to delete an endpoint of a line without deleting the line --> app crashes because one endpoint of line cannot be found

(015) Drag'n'drop of circles --> update of circle radius

(016) Bug when adding coincident constraints to multiple overlapping points: e.g. two circle mid points and zero point 
      - a coincidence constraint is added for each point resulting in duplicated constraints --> constraint error
      --> multiple constraints are added (which are redundant)

(006) Add more tools
   - Radius constraint for circle
   - Other constraints: parallel, equal, mid point, perpendicular, angle, point on circle/ point on line

(018) Improve placement of constraint labels --> make them "plane aware"
    - Improve positioning in general, make it plane aware
    - Add symbol for midpoint constraint          [done]
    - Add symbol for perpendicular constraint     [done, placement not that good]
    - Add symbol for point on object constraint   [done]
    - Improve the drawing of angle constraints on the canvas
       - Line should be highlighted when constraint is selected --> create its own react component

(019) Point on line constraint creates infinite loop in solver 
    - since some geometry is also changing slightly solver gets called again and again
    - a meachanism needs to be built to detect and prevent that
    - Could be caused by rounding errors, e.g. comparing floats for equal is not that good
       - To be handled in backend: use proper floating point comparising instead of just unequal sign (!=)

(021) Improvement of angle constraint tool
    - Currently the angle constraint only works properly when two lines are drawn separately having there ends pointing into the same direction                            (case 1)
    - If two lines are drawn with the normal line tool sharing a point, the actual angle is <value> + 180 degrees (because the ends point into different directions)       (case 2)
    - The opposite behaviour is achieved by running in the solver:
        c = slvs.makeConstraint(idHint + self._constraintIdBase, self.solveGroup, constraintType, planeId, valA, ptA, ptB, entityA, entityB)
        c.other = True
        self.sys.addConstraint(
            c
            )
    ---> need a logic to detecting the direction of the lines (e.g. by interpreting them as vectors)
       - if case 1 leave it as it is
       - if case 2 set the c.other property in the backend to True
    ---> logic could reside in backend so no change of protocol is needed
