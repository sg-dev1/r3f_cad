Priority of improvements (my ranking)
  - B008-2 // add plane offsets to sketches
  - B012-A // union tool
  - B023-A // topo naming SketchCycles
  - B023   // data model, topo naming problem
  - B012   // improvement, more features (3d geom tools)
  - B008   // arbitrary plane awareness
  - B004   [data model] - updated by solving other tickets
  - B003


List of Improvements

(B003) Tree view with sketches and geometries
    - we already have list with sketches --> for basic navigation
    - need to also have objects in sketch in the list --> e.g. use a tree view:
        - <Sketch>
           - Object1
           - Object2
           ...
        (where Object1 can be a face etc.)
        - <3DPart>
           - <3DSubpart1>
           - <3DSubpart2>
           ... (Sketches etc.)

(B004) Datamodel update sketchSlice.ts --> Document with sketches and geometry
    - need a way to store (3d) geometry
    - need to build as we go on (must hold parameters of extrudes, boolean operations etc.)
    - for 3D geometry maybe add a new slice (e.g. geom3DSlice.ts) to hold the information
      (similar to sketchSlice)

(B008) Add attachment to Sketches, e.g. where they are located in 3D space
    - (target) Plane representation (currently as string - update when needed):
        * ("xy" | "xz" | "yz" | normal_vector, offset), e.g.
          sketch.plane.plane         // holds the string as in old version
                                     //   - 3 standard planes "xy", "xz", and "yz"
                                     //   - leave empty ("") to use the normalVector
          sketch.plane.normalVector  // arbitrary plane given by its normal vector
          sketch.plane.offset        // offset for plane, may be used with .plane
                                     // or .normalVector
    - Functions to consider:
      - threejs_utils.ts:        calcIntersectionWithPlaneFromRect()
      - threejs_planes.ts:       nearly all functions
      - SketchCycleObjectNg.tsx  placement of the 2d shape in 3d
          (should not require a change, changes should be limited to the two files aboth)
    Other remarks:
      * If sketch offset is updated all points needed to be updated
        (the 3rd coordinate for the standard planes, for arbitrary planes it may involve
         multiple coordinates)
         --> support for "shifting" of plane (should be a redux action 
             of sketchSlice.ts - e.g. implementation in Sketch.ts)
      * F.e. in SketcherView.tsx itself no change needed, getCameraPositionForPlane()
        should return the correct position (need to consider an offset)
      * No change in SketchCycleObjectNg.tsx
      * Quaternion is not needed in sketcher since camera is always looking at [0, 0, 0]
(B008-2)
      Additionally offsets in all directions are needed (per default it is located at [0,0,0])
        * Need to be considered for sure:
           - SketchCycleObjectNg.tsx to draw the faces in the right space in 3D
        * Maybe need to be considered:
           - Sketcher tool  // e.g. if we allow rotations
        * No need to consider:
           - algo3d algorithms --> they work in 2D (an offset in 3D is not considered)
(B008-3)
      For future also an arbitrary plane may be selected (e.g. need for rotations etc.)
        * Need to be considered everywhere:
           SketchCycleObjectNg.tsx, Sketcher tool, algo3d algorithms
        * Also needs to be considered in solver backend which only supports the
          three standard planes
        * Quaternion should represent rotation from one (normal) vector to other
          - e.g. [0,0,1] (default of XY_PLANE) to normal vector of target plane
          - calc performed as in https://stackoverflow.com/questions/1171849/finding-quaternion-representing-the-rotation-from-one-vector-to-another
          - maybe can directly use Quaternion..setFromUnitVectors()
            https://threejs.org/docs/index.html#api/en/math/Quaternion
            (normal vectors need to be normalized!)
          - Could try this out for XZ_PLANE and YZ_PLANE
            (do I get values as in getRotationForPlaneAsQuaternion() found out empirically?)
          (these rotations should be around origin, an offset may need to be considered separately,
           e.g. need to use the position)

(B012) Creating of 3D objects
     - support of more operations 
     - 1) Boolean operations like union, cut, intersect etc. (OCCTBooleans)
     - 2) Modelling operations like pocket (holes), sweep along path (pipe), loft, revolve, etc. 
         (OCCTOperations)
         2.1) Additive
           - extrude (aka pad)
           - revolve (e.g. revolve a selected sketch around some axis)
           - loft
           - pipe (sweep a sketch along a path)
         2.2) Subtractive
           - pocket (e.g. subtractive extrude)
           - revolve (groove - einen Nut in einen Körper machen)
           - loft
           - pipe
      - 3) Fillets (Abrundungen) & Chamfers (Abschrägung am Eck) (OCCTFillets)
      - Boolean operations (1) should be applied automatically if two geometries (3d bodies) touch
        each other -> need to find out when two bodies are touching

(B012-A) Union tool
  - Improvements to the selection of objects in Union tool:
    1) Visualization:
    - Selection of objects: All selected objects should be highlighted  (e.g. use a differnt color as for hover, e.g. cyan)
    2) The way select works:
    - Currently after two elements are selected, the union is applied
    - Shall a union be possible if two objects are not touching?
      From Occt side this is no problem, the union works (no error message)
    - Select is currently not limited (e.g. to a selected modelling tool etc.)
      - it simply add the id of the selected 3D geometry to the list (modellingToolStateSlice->selectedShapeIds)  -  a second click removes it

(B023) Topological naming problem (general case)
  - Implement proper naming of 3d geometry s.t. it can be referenced
  - Need to think how to best solve this for this application
  - May need kind of a diff to do updates: <OLD_STATE> vs <NEW_STATE>, what has changed?

(B023-A) Labeling implementation in algo3d.ts for SketchCycles (Toponaming of SketchCycles)
  Goal:
    - Goal here is to replace the current referrencing to SketchCycles
      as [<sketch-id>, <id-of-cycle>], e.g. its index, with [<sketch-id>, <label-of-cycle>]
  Status of current implementation:
    - Currently mapping of labels is only done based on geometry (centroids)
    - If the shape and/or position of sketch cycles changes --> cannot be labelled any more
    - As fallback to label unlabeled nodes, its index is used
      (like in the old implementation as how it is refered to the cycle using its index,
       e.g. by  [<sketch-id>, <id-of-cycle>])
  What to do:
    - Some more testing is needed to identify cases
      - where the labeling breaks
    - Would need to work with more realistic scenarios of real modelling tasks
      (e.g. no one will create lots of overlapping circles)
    - Need to define test cases to model with the app (only 2d shapes with multiple (inner) cycles)


On Hold

(B026) Testing of algo3d-occ.ts
  - Create new test cases for (B025)
    --> need to test the algo3d-occ.ts library
	- need to find a way to programatically check if occt faces are properly created
      --> use area comparision flatten vs occt
  - main issue with occt tests is that they need a browser environment, e.g. for the web worker
  - Improve the test creation and handling for algo3d.ts
     - move test data in own files in subfolder?
  - Could use
    playwright
    https://nextjs.org/docs/app/building-your-application/testing/playwright
    cypress
    https://nextjs.org/docs/app/building-your-application/testing/cypress
    - more to interact with real browser, e.g. have page as input and then call goto
      to navigate to an url, e.g. await page.goto('http://localhost:3000/')
    - https://www.browserstack.com/guide/playwright-vs-cypress  
    jest-puppeteer: 
    https://github.com/argos-ci/jest-puppeteer
    - not sure if this is the right tool since it has the api to navigate to real web page
    - I would just need to be able to run my code (from algo3d-occ) in browser context and 
       check on some of the results
    - I would need something where I can just call findCyclesInSketchAndConvertToOcct()
    - Will also need some setup to create the bitbybit instance with the WebWorker
    Karma test runner:
    https://github.com/tom-sherman/blog/blob/main/posts/02-running-jest-tests-in-a-browser.md#the-good-stuff
    https://karma-runner.github.io/latest/index.html
    - Can be configured to run with different command (e.g. yarn browser-tests instead of yarn tests)
    - Are real integration tests
    - Then we would have two set of tests: (1) unit tests with jest, (2) browser tests with karma
    - deprecated since April 2023, so not an option
    https://github.com/karma-runner/karma/commit/450fdfdac5b999967daec1020f1ac69cf9b854ab

(B022)  More testing / bug fixing:
       - combine "inner shape" test case with intersection point test case, e.g.
         have a geometry with inner shapes as well as intersection geometry

(B013) Issue with current handling of bitbybit
     -> should be created once upon first opening of page and then reused
     -> currently it seems to aquire more and more memory --> memory leak
     -> already triggered an memory issue after the application was running for a long time
     Changes needed:
       - Use an app global instance of bitbybit
         e.g. use solution with createContext() / useContext() like
         https://github.com/vercel/next.js/discussions/14601#discussioncomment-44198
       - Properly delete shapes created using bitbybit.occt.deleteShapes()
     - Is there a way to profile the memory usage of an Web Assembly?
     - Also need to test the 3d geometry generation functionality (extrude)
        - first tests were successful:
           - click on part of sketch      --> number input appears
           - Enter number and press enter --> 3d geometry appears
           - also negative numbers for other direction work
           - hiding of 3d geometry not yet implemented (see B016)
           - 3d geometry also survices a page reload --> it gets generated again


Done Improvements

(B027) Improvement of occt root
  - init() function from occt root to be moved to occ_utils.ts --> e.g. occ_init(initCodeAfterInitialized)
    (use lambda for the logic to run when cleanup is completed)
  - proper delete of occt shapes --> "shape lifecycle"
  - some manual smoke testing (in browser) of changes

(B025) Bug when extruding sketches with inner cycles
  - issue with circle wires (unknown if the are clockwise/ counterclockwise)
  - seem to depend on the direction parameter which is the direction of the
    local coordinate system of the circle
  - I set it to the normal vector of the plane (which is most likely wrong)
  - (1) Once way to fix it would be using the correct direction parameter
        (I don't know what that is)
    OR
  - (2) Fix by calculating the face area
      - compare face area calculated with flatten lib and face area of occt face
      - for this the face area of the flatten face needs to be updated
        (substracting all areas of inner cycles aka holes)
      - if flatten lib area and occt area do not match
         --> all inner wires need to be reversed
  ----
  - it seems that wires need to be reversed in some occasions
  - so in some cases inner cycles work fine, in others not
  - it depends on how the lines were drawn
  - most issues with circles

(B024) Extruding sketch does not consider inner cycles (issue most likely in algo3d-occ.ts)

(B011) Debug tool s.t. a current state of application can be saved and later on restored
     (has something to do with serialization - not necesarrily connected to 3dMod tool)
     - need to serialize state of app anyways
     --> use the Firefox Extension LocalStorage Editor to import/export redux state
     https://addons.mozilla.org/en-US/firefox/addon/localstorage-editor/

(B021) Proper visualization of 3D objects
     - Tidy up/ follow up tasks:
        - support for highlighting of faces
        - address z-fighting problem (between faces and lines)
           - get rid of screen flickering of overlapping (edge) lines and faces?
        - improvement of face coloring (e.g. shadows - use different material?)        
        - support of (multi) selection (maybe also proper naming needed --> Topo naming problem)
           --> later/ other ticket
        
     - Currently visualization is done using the shape converted to a mesh
       used as input for a BufferGeometry (see TopoDSVisualizer.tsx)
     - There are other ways to visualize 3d geometry (than BufferGeometry):
        - e.g. use ExtrudeGeometry for extrude operations
          https://threejs.org/docs/index.html#api/en/geometries/ExtrudeGeometry
        - (not sure if this will work for other modelling operation types)
     - Maybe even better to visualize individual parts of shape separately:
        - faces
        - edges
        (to retrieve faces, wires, edges from occt shape see OcctRoot.tsx)
        - Benefit:
          - Faces/edges can be highlighed (and selected) separately
          --> build support for multi select
        - draw edges in different color than face (so no need for wireframe)
        - shadows on face (need proper material, lighting)
        - e.g. use drei Line for edge (an arc are multiple lines with useArcPoints())
        - for faces use shapeGeometry
        - could put everything into a three.js Group

(B022-A) Bugfix: Input field for extruding sketch shapes appeared randomly because onClick event on invisible shapes fired.
         In this way it seemed that some geometry was extruded rotated (was not the case).

(B022-B) Bugfix: After deleting a sketch the shape geometry still remained visible (hover still worked etc.)
         Issue was that sketchShapes list in OcctRoot.tsx was not properly updated.

(B020) Add more unit tests (e.g. for Sketch.ts etc.)

(B019) Testing - at least algo3d should have some unit tests
    - @testing algo3d:
      - refactored algo3d into algo3d and algo3d-occ (with @bitbybit-dev functionality)
          - tests need to be run on algo3d to test its functionality
          - algo3d-occ cannot be tested for now due to dependency on web worker (only manual test in browser)
      - use of jsdom-worker as Web Worker replacement  [did not work -> don't use it]
        https://github.com/developit/jsdom-worker/tree/main
        - could not get it working with that
        - there are still timeout issues --> not working as expected
        - alternatively could refactore the code to get the @bitbybit-dev functionality out of algo3d
    - would also have the benefit that refactorings could be done
    (- performance tests, etc.)
    - for unit testing use jest
      https://nextjs.org/docs/app/building-your-application/testing/jest

(B018) algo3d: Add support for "inner cycles"
     Current Status:
     - currently cycles are only seen as connected (e.g. belonging to a cluster)
       if they have intersection points
     - cycles that don't have intersection points belong to a different cluster
     Wanted Status:
     - if a cycle is inside some other cycle, shapes should be created accordingly
        - use the larger cycle as other border
        - use the smaller (inside) cycle as inner border
        - there are additional shapes having the inside cycles as their border
        a) there may be mulitple shapes inside each other
        b) inside these shapes there may be additional shapes
     - need to implement an algorithm to get all this inside shapes
        - this merges existing cluster (e.g. removes them)
        - we do not want overlapping shapes (currently that's the case because 
          we don't have this functionality)
     - Implementation notes (copied from source file and shortened)
        - Use Polygon class from flatten -> can be easily initialized using Segment/Arc array from SketchCycleType
        - could use Flatten.Relations.inside to check if one polygon lies inside the other
        - did not use Boolean Operations to retrieve final shapes (not needed)
        Properties of Implementation:
        - IMPORTANT: We may also need to outer cycle of the cluster as removed in the previous step
            - if one polygon contains the other cycle, we do not have to check the rest of the cluster
        - Two cycles belonging to one cluster cannot be inside each other (they are distinct)
        Algorithm:
        Step 1: Search if any shapes from one cluster lie inside the other
          - start with the other shape (currently removed) --> if it fits inside other shapes need not be searched
          - otherwise search individual shapes
        Step 2: Add innerCycles found for certain SketchCycles

(B016) Implement hiding of 3D Geometry - needs an object explorer

(B017) Bug in delete sketch (no longer working)

(B015) Implement hiding of sketches in 3D modeller
     - Faces should be only visible for a single selected sketch
     - If it is not selected, but visible (not hidden) only the lines should be drawn

(B014) Bug in algo3d: need to remove cycle with largest area for each group of connected cycles

(B010) Algorithm finding cycles is not 100% reliable
     - not finding all possible cycles, some are omitted

(B007) Display Sketch in 3D View + Extrude operation
    - All closed surfaces shall be individually selectable --> to apply an operation (like extrude)
    - Highlighting is already implemented, selection for the operation is then the 
      next step
    - Workflow: 
       1) Create Sketch
       2) Go back to 3D Modeller and Sketch is displayed
       3) Select one/ multiple faces an apply operation (e.g. Extrude --> give a length)
           e.g. right click on single Face (multiple Face selection) -> Extrude
       4) 3D Body is created
    - A history of these operations shall be stored (e.g. also to go back and forth in time)

(B008-1) Support of standard planes XY, XZ, and YZ to draw a sketch on
    For a sketch also the Plane should be selectable (X, Y, or Z)
      * Should be the most easiest to implement
      * already implemented using functions from threejs_planes.ts
        (SketchCycleObjectNg.tsx need to use functions from threejs_planes.ts)

(B001) Basic main view with camera control --> MainView.tsx
    - add 3d gizmo (cube) showing which plane etc. is visible

(B002) Integration of Sketcher tool 
    - create new sketch                 // done
    - update existing one -> set active one to the selected sketch and open Sketcher tool
      (simple solution: add edit button in SketchTable.tsx)
    - navigation between Sketcher and 3dMod tools

(B005) Mapping of sketches to 3D View (and basic workflow)
    - All closed lines should be interpreted as faces
    - On each face (or multiple) an Extrude is possible to create a 3D object
    --> see B007

(B007-A) Improve the visualization
    - SketchCycleObjectNg: Add display of lines as in original SketchCycleObject
    - Fix display of arcs -> if an arc is part of a (line-)segment outside of shape
      is also shown to be part of the face
    - SketchCycleObject need to be refactored to not handle segments / arcs 
      separately, so either we can have
      1) a cycle with a single circle (circle may not appear multiple times and only once)
      2) a cycle only consisting of segments
      3) a cycle consisting of segements and arcs
      4) a cycle consisting only of arcs 
      - For (3) and (4) convex / concav shapes need to be considered
        (by properly drawing a shape from start to end) which is currently not the case
        (especially because segements and arcs are handled differently)
    - Different Sketches should be highlighed differently         [done]
    - Improve colors, highlighting etc. of displayed Sketches     [done]
    - Add visualization of circles                                [done]
    - Show/ Hide of sketches displayed (future topic)             [done, simple solution]

(B010) Improvement of algo3d routines
    - issues when line segments (arcs?) are facing into the wrong direction
      --> they need to be reversed at the end of findConnectedLinesInSketch()
      (Sort the segments s.t. they are in the correct order ...)
    - not all cycles are found in complex situations
    - need to find a way to improve it
    - there are still some issues (e.g. generation of Arcs)

(B009) Bug in algo3d.ts - findConnectedLinesInSketch:
    - if there are multiple unconnected parts in the sketch
      only connected lines in one part are found
    - the others are ignored
    - most likely caused how the dfs algorithm is started,
      it is only started for the first node
    - need to do an additional check if there are unconnected
      parts in the sketch

(B007-B) Detection of circles in sketch
  - Need a way to find out if lines are connected at all, lines describe multiple faces etc.?
      E.g. get all Faces from given lines and circles --> e.g. these could be used for an extrude
  - How does the current implementation handle multiple overlapping objects in one Sketch,
      e.g. two rectangles?
      - It currently only supports a single closed line segment (of any shape)
      - If it is not closed --> Error (should be the case, however the error should 
          be detected before calling combineEdgesAndWiresIntoAWire occt function)
      - If it has more than one closed line segments --> Error:
        Uncaught (in promise) OCCT computation failed. Error: Wire is disconnected and can not be
        constructed While executing function - shapes.wire.combineEdgesAndWiresIntoAWire. 
        Input values were: ...
      - so current implementation using combineEdgesAndWiresIntoAWire() only supports a 
          single connected line segment
      ---> This implementation is no longer in use

(B006) Integration of opencascade.js / @bitbybit-dev/occt-worker
    - Currently there are massive performance issues with initOpenCascade() function (to be tested on different machines)
    - Also when switching to the Sketcher View immediately performance is still impacted
       - in this case need to find a way to stop initOpenCascade() function
    - Docu says that "You can then host this asset using infinite caching duration headers"
       https://ocjs.org/docs/getting-started/configure-bundler
       - How to do that?
    - Check out if one of these should be used instead: 
       https://www.npmjs.com/package/@bitbybit-dev/occt-worker      // --> go for this since it is for the browser (uses a web worker)
       https://www.npmjs.com/package/@bitbybit-dev/occt             // this is just the dependency of occt-worker
       https://www.npmjs.com/package/@bitbybit-dev/core
       --> So there are:
         - @bitbybit-dev/occt           Core implementation using opencascade.js as dependency  (may also be used with node.js)
         - @bitbybit-dev/occt-worker    Core implementation + Web Worker (meant to be used in Browser)
         - @bitbybit-dev/core           Also includes BabylonJS as rendering framework  (occt + occt-worker as dependencies) 
