Priority of improvements (my ranking)
  - B007-A
  - B007
  - B002 -> edit sketch
  - B008
  - B005  
  - B004
  - B003
  - B001  // updates as needed


List of Improvements

(B001) Basic main view with camera control --> MainView.tsx

(B002) Integration of Sketcher tool 
    - create new sketch                 // done
    - update existing one -> set active one to the selected sketch and open Sketcher tool
    - navigation between Sketcher and 3dMod tools

(B003) List with sketches and geometries
    - we already have list with sketches --> for basic navigation
    - need to also have objects in sketch in the list, e.g. use a tree view:
        - <Sketch>
           - Object1
           - Object2
           ...
        (where Object1 can be a face etc.)

(B004) Datamodel update sketchSlice.ts --> Document with sketches and geometry
    - need a way to store (3d) geometry

(B005) Mapping of sketches to 3D View (and basic workflow)
    - All closed lines should be interpreted as faces
    - On each face (or multiple) an Extrude is possible to create a 3D object
    --> see B007

(B007) Display Sketch in 3D View
    - All closed surfaces shall be individually selectable --> to apply an operation (like extrude)
    - Workflow: 
       1) Create Sketch
       2) Go back to 3D Modeller and Sketch is displayed
       3) Select one/ multiple faces an apply operation (e.g. Extrude --> give a length)
           e.g. right click on single Face (multiple Face selection) -> Extrude
       4) 3D Body is created
    - A history of these operations shall be stored (e.g. also to go back and forth in time)
(B007-A) Improve the visualization
    - Fix display of arcs -> if an arc is part of a (line-)segment outside of shape
      is also shown to be part of the face
    - SketchCycleObject need to be refactored to not handle segments / arcs 
      separately, so either we can have
      1) a cycle with a single circle (circle may not appear multiple times and only once)
      2) a cycle only consisting of segments
      3) a cycle consisting of segements and arcs
      4) a cycle consisting only of arcs 
      - For (3) and (4) convex / concav shapes need to be considered
        (by properly drawing a shape from start to end) which is currently not the case
        (especially because segements and arcs are handled differently)
    - Different Sketches should be highlighed differently         [done]
    - Improve colors, highlighting etc. of displayed Sketches     [done]
    - Add visualization of circles                                [done]
    - Show/ Hide of sketches displayed (future topic)             [done, simple solution]

(B008) Add attachment to Sketches, e.g. where they are located in 3D space
    - For a sketch also the Plane should be selectable (X, Y, or Z)
    - Additionally offsets in all directions are needed (per default it is located at [0,0,0])
    - for future also an arbitrary plane may be selected (e.g. need for rotations etc.)


Done Improvements

(B010) Improvement of algo3d routines
    - issues when line segments (arcs?) are facing into the wrong direction
      --> they need to be reversed at the end of findConnectedLinesInSketch()
      (Sort the segments s.t. they are in the correct order ...)
    - not all cycles are found in complex situations
    - need to find a way to improve it
    - there are still some issues (e.g. generation of Arcs)

(B009) Bug in algo3d.ts - findConnectedLinesInSketch:
    - if there are multiple unconnected parts in the sketch
      only connected lines in one part are found
    - the others are ignored
    - most likely caused how the dfs algorithm is started,
      it is only started for the first node
    - need to do an additional check if there are unconnected
      parts in the sketch

(B007-B) Detection of circles in sketch
  - Need a way to find out if lines are connected at all, lines describe multiple faces etc.?
      E.g. get all Faces from given lines and circles --> e.g. these could be used for an extrude
  - How does the current implementation handle multiple overlapping objects in one Sketch,
      e.g. two rectangles?
      - It currently only supports a single closed line segment (of any shape)
      - If it is not closed --> Error (should be the case, however the error should 
          be detected before calling combineEdgesAndWiresIntoAWire occt function)
      - If it has more than one closed line segments --> Error:
        Uncaught (in promise) OCCT computation failed. Error: Wire is disconnected and can not be
        constructed While executing function - shapes.wire.combineEdgesAndWiresIntoAWire. 
        Input values were: ...
      - so current implementation using combineEdgesAndWiresIntoAWire() only supports a 
          single connected line segment
      ---> This implementation is no longer in use

(B006) Integration of opencascade.js / @bitbybit-dev/occt-worker
    - Currently there are massive performance issues with initOpenCascade() function (to be tested on different machines)
    - Also when switching to the Sketcher View immediately performance is still impacted
       - in this case need to find a way to stop initOpenCascade() function
    - Docu says that "You can then host this asset using infinite caching duration headers"
       https://ocjs.org/docs/getting-started/configure-bundler
       - How to do that?
    - Check out if one of these should be used instead: 
       https://www.npmjs.com/package/@bitbybit-dev/occt-worker      // --> go for this since it is for the browser (uses a web worker)
       https://www.npmjs.com/package/@bitbybit-dev/occt             // this is just the dependency of occt-worker
       https://www.npmjs.com/package/@bitbybit-dev/core
       --> So there are:
         - @bitbybit-dev/occt           Core implementation using opencascade.js as dependency  (may also be used with node.js)
         - @bitbybit-dev/occt-worker    Core implementation + Web Worker (meant to be used in Browser)
         - @bitbybit-dev/core           Also includes BabylonJS as rendering framework  (occt + occt-worker as dependencies) 
